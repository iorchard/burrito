#!/bin/bash
export KUBECONFIG=/etc/kubernetes/kubelet.conf

TRIES=10
function _check_apiserver() {
  APISERVER=$(kubectl --request-timeout=3s config view -o jsonpath='{.clusters[0].cluster.server}')
  counter=0
  until [[ ${counter} -gt ${TRIES} ]]; do
    curl -sk -m 3 ${APISERVER} -o /dev/null && return 0 || ((counter++))
    sleep 3
  done
  return 1
}
function stop_gnsh() {
  echo "Check if I can connect to kube-apiserver."
  if _check_apiserver; then
    echo "Yes, kube-apiserver is reachable."
  else
    echo "Abort! kube-apiserver is not reachable."
    exit 1
  fi

  echo "Show the node status."
  kubectl get node ${HOSTNAME}
  sleep 5

  echo "Let's drain my node ${HOSTNAME}"
  kubectl --request-timeout=3s drain ${HOSTNAME} \
    --delete-emptydir-data=true \
    --grace-period=120 \
    --ignore-daemonsets=true \
    --timeout=300s
  sleep 20

  echo "Graceful Node Shutdown Helper (GNSH) completed a drain process."
}

function start_gnsh() {
  echo "Check if I can connect to kube-apiserver."
  if _check_apiserver; then
    echo "Yes, kube-apiserver is reachable."
  else
    echo "Abort! kube-apiserver is not reachable."
    exit 1
  fi
  echo "Uncordon my node ${HOSTNAME}."
  counter=0
  until [[ ${counter} -gt ${TRIES} ]]; do
    kubectl --request-timeout=3s uncordon ${HOSTNAME} || true
    echo "Check if the node is schedulable."
    SCHED=$(kubectl get nodes ${HOSTNAME} -o jsonpath='{.spec.unschedulable}')
    if [[ "x${SCHED}" = "x" ]]; then
      echo "Yes, ${HOSTNAME} is schedulable."
      exit 0
    else
      echo "No, ${HOSTNAME} is not schedulable."
      sleep 3
    fi
  done
}

case "$1" in
  start)
    start_gnsh
    ;;
  stop)
    stop_gnsh
    ;;
  check)
    _check_apiserver
    ;;
  *)
    echo "Usage) $0 {start|stop|check}"
    exit 1
    ;;
esac


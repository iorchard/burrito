---
- name: Setup | copy static files
  ansible.builtin.copy:
    dest: "{{ item.dest }}"
    src: "{{ ansible_os_family | lower }}{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    backup: true
  loop: "{{ service_conf }}"
  become: true
  notify:
    - systemctl restart service

- name: Setup | create artifacts directory
  ansible.builtin.file:
    path: "{{ artifacts_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true

- name: Setup | templating files
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.dest | basename }}.j2"
    mode: "0600"
  loop: "{{ template_files }}"
  delegate_to: localhost
  run_once: true

- name: Setup | templating files (for offline installation)
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.dest | basename }}.j2"
    mode: "0600"
  loop: "{{ offline_template_files }}"
  delegate_to: localhost
  run_once: true
  when: offline

- name: Setup | create namespace
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ purestorage_namespace }}"
        labels:
          pod-security.kubernetes.io/enforce: privileged
  become: true
  delegate_to: localhost
  run_once: true

- name: Setup | create a secret
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: px-pure-secret
        namespace: "{{ purestorage_namespace }}"
      data:
        pure.json: "{{ lookup('file', '{{ artifacts_dir }}/pure.json') | b64encode }}"
  become: true
  delegate_to: localhost
  run_once: true

- name: Setup | create a configmap (for offline installation)
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: px-versions
        namespace: "{{ purestorage_namespace }}"
      data:
        versions.yaml: "{{ lookup('file', '{{ artifacts_dir }}/versions.yaml') }}"
  become: true
  delegate_to: localhost
  run_once: true
  when: offline

- name: Setup | add node labels
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ inventory_hostname }}"
        labels:
          portworx.io/node-type: "{{ (inventory_hostname in groups['kube_control_plane']) | ternary('storage', 'storageless') }}"
  become: true
  delegate_to: localhost

- name: Setup | create resources
  kubernetes.core.k8s:
    src: "{{ item }}"
    state: present
    wait: true
  become: true
  with_fileglob:
    - "{{ artifacts_dir }}/*.yml"
  delegate_to: localhost
  run_once: true

- name: Setup | wait until px cluster is operational
  ansible.builtin.uri:
    url: "{{ check_node_health.url }}"
    method: GET
    timeout: 3
  failed_when: false
  register: _return
  until: _return.status == 200
  retries: "{{ check_node_health.retries }}"
  delay: "{{ check_node_health.delay }}"

- name: Setup | wait until portworx kvdb is running
  ansible.builtin.uri:
    url: "{{ check_kvdb_health.url }}"
    method: GET
    timeout: 3
  failed_when: false
  register: _return
  until: _return.status == 200
  retries: "{{ check_kvdb_health.retries }}"
  delay: "{{ check_kvdb_health.delay }}"
  when: inventory_hostname in groups['kube_control_plane']
...

---
- name: OpenStack | create openstack namespace
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: openstack
        labels:
          kubernetes.io/metadata.name: openstack
          pod-security.kubernetes.io/enforce: privileged
  become: true
  delegate_to: localhost
  run_once: true

- name: OpenStack | make sure to set up control plane label
  ansible.builtin.command: >-
    kubectl label nodes --overwrite {{ item }} openstack-control-plane=enabled
  become: true
  loop: "{{ groups['controller-node'] }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | make sure to set up compute node label
  ansible.builtin.command: >-
    kubectl label nodes --overwrite {{ item }} openstack-compute-node=enabled
  become: true
  loop: "{{ groups['compute-node'] }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | create openstack artifacts directory
  ansible.builtin.file:
    path: "{{ os_artifacts_dir }}"
    state: directory
  delegate_to: localhost
  run_once: true

- name: OpenStack | get admin keyring
  ansible.builtin.command: >-
    ceph auth get-key client.admin
  register: result
  become: true
  when: '"ceph" in storage_backends'
  delegate_to: localhost
  run_once: true

- name: OpenStack | set fact for admin keyring
  ansible.builtin.set_fact:
    ceph_admin_key: "{{ result.stdout }}"
  when: '"ceph" in storage_backends'
  delegate_to: localhost
  run_once: true

- name: OpenStack | get cinder keyring
  ansible.builtin.command: >-
    ceph auth get-key client.cinder
  register: result
  become: true
  when: '"ceph" in storage_backends'
  delegate_to: localhost
  run_once: true

- name: OpenStack | set fact for cinder keyring
  ansible.builtin.set_fact:
    ceph_cinder_key: "{{ result.stdout }}"
  when: '"ceph" in storage_backends'
  delegate_to: localhost
  run_once: true

- name: OpenStack | add openvswitch to osh_infra_charts if neutron_ml2_plugin is ovs
  ansible.builtin.set_fact:
    osh_infra_charts: "{{ is_ovs|ternary(osh_infra_charts|union(['openvswitch']), osh_infra_charts) }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | add ovn to osh_infra_charts if neutron_ml2_plugin is ovn
  ansible.builtin.set_fact:
    osh_infra_charts: "{{ is_ovn|ternary(osh_infra_charts|union(['ovn']), osh_infra_charts) }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | add ceph-provisioners to osh_infra_charts if ceph in storage_backends
  ansible.builtin.set_fact:
    osh_infra_charts: "{{ is_ceph|ternary(osh_infra_charts|union(['ceph-provisioners']), osh_infra_charts) }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | show osh_infra_charts to install
  ansible.builtin.debug:
    msg: "{{ osh_infra_charts }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | templating osh infra values
  ansible.builtin.template:
    dest: "{{ os_artifacts_dir }}/{{ item }}.yml"
    src: "osh_infra/{{ item }}.yml.j2"
    mode: "0644"
  loop: "{{ osh_infra_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh-infra

- name: OpenStack | create dependency chart directory
  ansible.builtin.file:
    path: "{{ osh_infra_path }}/{{ item }}/charts"
    state: directory
    mode: "0755"
  loop: "{{ osh_infra_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh-infra

- name: OpenStack | symlink helm-toolkit dependency chart
  ansible.builtin.file:
    dest: "{{ osh_infra_path }}/{{ item }}/charts/helm-toolkit"
    src: "{{ osh_infra_path }}/helm-toolkit"
    state: link
  loop: "{{ osh_infra_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh-infra

- name: OpenStack | deploy osh infra charts
  kubernetes.core.helm:
    name: "{{ item }}"
    chart_ref: "{{ osh_infra_path }}/{{ item }}"
    release_namespace: openstack
    timeout: "10m0s"
    values_files:
      - "{{ os_artifacts_dir }}/{{ item }}.yml"
  become: true
  loop: "{{ osh_infra_charts }}"
  delegate_to: localhost
  run_once: true
  tags: ["osh-infra", "deploy-chart"]

- name: OpenStack | create dependency chart directory for osh
  ansible.builtin.file:
    path: "{{ osh_path }}/{{ item }}/charts"
    state: directory
    mode: "0755"
  loop: "{{ osh_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh

- name: OpenStack | symlink helm-toolkit dependency chart for osh
  ansible.builtin.file:
    dest: "{{ osh_path }}/{{ item }}/charts/helm-toolkit"
    src: "{{ osh_infra_path }}/helm-toolkit"
    state: link
  loop: "{{ osh_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh

- name: OpenStack | add barbican to osh_charts if install_barbican is true
  ansible.builtin.set_fact:
    osh_charts: "{{ install_barbican|ternary(osh_charts|union(['barbican']), osh_charts) }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | show osh_charts to install
  ansible.builtin.debug:
    msg: "{{ osh_charts }}"
  delegate_to: localhost
  run_once: true

- name: OpenStack | templating osh values
  ansible.builtin.template:
    dest: "{{ os_artifacts_dir }}/{{ item }}.yml"
    src: "osh/{{ item }}.yml.j2"
    mode: "0644"
  loop: "{{ osh_charts }}"
  delegate_to: localhost
  run_once: true
  tags: osh

- name: OpenStack | deploy osh charts
  kubernetes.core.helm:
    release_name: "{{ item }}"
    chart_ref: "{{ osh_path }}/{{ item }}"
    release_namespace: openstack
    timeout: "10m0s"
    values_files:
      - "{{ os_artifacts_dir }}/{{ item }}.yml"
  become: true
  loop: "{{ osh_charts }}"
  delegate_to: localhost
  run_once: true
  tags: ["osh", "deploy-chart"]

- name: OpenStack | templating btx chart values
  ansible.builtin.template:
    dest: "{{ os_artifacts_dir }}/{{ item }}.yml"
    src: "{{ item }}.yml.j2"
    mode: "0644"
  loop: "{{ btx_charts }}"
  delegate_to: localhost
  run_once: true
  tags: btx

- name: OpenStack | deploy btx charts
  kubernetes.core.helm:
    release_name: "{{ item }}"
    chart_ref: "{{ btx_path }}/{{ item }}"
    release_namespace: openstack
    values_files:
      - "{{ os_artifacts_dir }}/{{ item }}.yml"
  become: true
  loop: "{{ btx_charts }}"
  delegate_to: localhost
  run_once: true
  tags: btx

- name: OpenStack | create .btx.env
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.btx.env"
    src: ".btx.env"
    mode: "0600"
  tags: btx

- name: OpenStack | add .btx.env in .bashrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    insertafter: EOF
    marker: "# {mark} BTX ENV BLOCK"
    block: >-
      if kubectl -n openstack get po -l application=btx -o jsonpath='{.items[0].metadata.name}' &>/dev/null; then
        . {{ ansible_env.HOME }}/.btx.env
      fi
  tags: btx
...

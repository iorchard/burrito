---
images:
  tags:
    bootstrap: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    db_drop: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    db_init: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    ks_user: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    ks_service: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    ks_endpoints: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    dep_check: "{{ quay_image_repo }}/airshipit/kubernetes-entrypoint:v1.0.0"
    rabbit_init: "{{ docker_image_repo }}/library/rabbitmq:3.12.11-management"
    nova_api: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_cell_setup: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_cell_setup_init: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    nova_compute: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_compute_ssh: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_conductor: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_db_sync: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_novncproxy: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_novncproxy_assets: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_scheduler: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_spiceproxy: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_spiceproxy_assets: "{{ docker_image_repo }}/jijisa/nova:2023.1-ubuntu_jammy"
    nova_service_cleaner: "{{ docker_image_repo }}/openstackhelm/ceph-config-helper:latest-ubuntu_focal"
    nova_storage_init: "{{ docker_image_repo }}/openstackhelm/ceph-config-helper:latest-ubuntu_focal"


volume:
  class_name: "{{ storageclass_name }}"
  size: "{{ nova.volume_size }}"

bootstrap:
  structured:
    flavors:
      enabled: true
      options:
        m1_small: null
        m1_medium: null
        m1_large: null
        m1_xlarge: null
network:
  backend:
  - {{ is_ovs|ternary('openvswitch', 'linuxbridge') }}
  osapi:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "https"
  metadata:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "https"
  novncproxy:
    name: nova-novncproxy
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "https"
    node_port:
      enabled: true
      port: 30608
console:
  console_kind: novnc
  novnc:
    compute:
      vncserver_proxyclient_interface: {{ nova.vncserver_proxyclient_interface }}
    vncproxy:
      vncserver_proxyclient_interface: {{ nova.vncserver_proxyclient_interface }}

conf:
  enable_iscsi: {{ enable_iscsi }}
  db_acl:
    enabled: true
{% raw %}
  mpm_event: |
    <IfModule mpm_event_module>
      ServerLimit         1024
      StartServers        32
      MinSpareThreads     32
      MaxSpareThreads     256
      ThreadsPerChild     25
      MaxRequestsPerChild 128
      ThreadLimit         720
    </IfModule>
  wsgi_nova_api: |
    {{- $portInt := tuple "compute" "service" "api" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
    Listen {{ $portInt }}
    <VirtualHost *:{{ $portInt }}>
      ServerName {{ printf "%s.%s.svc.%s" "nova-api" .Release.Namespace .Values.endpoints.cluster_domain_suffix }}
      WSGIDaemonProcess nova-api processes=1 threads=1 user=nova display-name=%{GROUP}
      WSGIProcessGroup nova-api
      WSGIScriptAlias /  /var/www/cgi-bin/nova/nova-api-wsgi
      WSGIApplicationGroup %{GLOBAL}
      WSGIPassAuthorization On
      AllowEncodedSlashes On
      <IfVersion >= 2.4>
        ErrorLogFormat "%{cu}t %M"
      </IfVersion>
      SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
      ErrorLog /dev/stdout
      CustomLog /dev/stdout combined env=!forwarded
      CustomLog /dev/stdout proxy env=forwarded

      SSLEngine on
      SSLCertificateFile      /etc/nova/certs/tls.crt
      SSLCertificateKeyFile   /etc/nova/certs/tls.key
      SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
      SSLCipherSuite          ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
      SSLHonorCipherOrder     on
    </VirtualHost>
  wsgi_nova_metadata: |
    {{- $portInt := tuple "compute_metadata" "service" "metadata" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
    Listen {{ $portInt }}
    <VirtualHost *:{{ $portInt }}>
      ServerName {{ printf "%s.%s.svc.%s" "nova-metadata" .Release.Namespace .Values.endpoints.cluster_domain_suffix }}
      WSGIDaemonProcess nova-metadata processes=1 threads=1 user=nova display-name=%{GROUP}
      WSGIProcessGroup nova-metadata
      WSGIScriptAlias /  /var/www/cgi-bin/nova/nova-metadata-wsgi
      WSGIApplicationGroup %{GLOBAL}
      WSGIPassAuthorization On
      AllowEncodedSlashes On
      <IfVersion >= 2.4>
        ErrorLogFormat "%{cu}t %M"
      </IfVersion>
      SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
      ErrorLog /dev/stdout
      CustomLog /dev/stdout combined env=!forwarded
      CustomLog /dev/stdout proxy env=forwarded

      SSLEngine on
      SSLCertificateFile      /etc/nova/certs/tls.crt
      SSLCertificateKeyFile   /etc/nova/certs/tls.key
      SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
      SSLCipherSuite          ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
      SSLHonorCipherOrder     on
    </VirtualHost>
{% endraw %}

  software:
    apache2:
      a2enmod:
        - ssl
  hypervisor:
    host_interface: {{ nova.hypervisor_host_interface }}
  libvirt:
    live_migration_interface: {{ nova.libvirt_live_migration_interface }}
{% if "ceph" in storage_backends %}
  ceph:
    enabled: true
    admin_keyring: {{ ceph_admin_key }}
    cinder:
      user: cinder
      keyring: {{ ceph_cinder_key }}
{% else %}
  ceph:
    enabled: false
{% endif %}
  nova:
    console:
      ssl_minimum_version: tlsv1_2
    glance:
      cafile: /etc/nova/certs/ca.crt
    ironic:
      cafile: /etc/nova/certs/ca.crt
    neutron:
      cafile: /etc/nova/certs/ca.crt
    keystone_authtoken:
      cafile: /etc/nova/certs/ca.crt
    cinder:
      cafile: /etc/nova/certs/ca.crt
    placement:
      cafile: /etc/nova/certs/ca.crt
    keystone:
      cafile: /etc/nova/certs/ca.crt
    key_manager:
      backend: barbican
    oslo_messaging_rabbit:
      ssl: true
      ssl_ca_file: /etc/rabbitmq/certs/ca.crt
      ssl_cert_file: /etc/rabbitmq/certs/tls.crt
      ssl_key_file: /etc/rabbitmq/certs/tls.key
      rabbit_retry_interval: {{ rabbit_retry_interval }}
      rabbit_retry_backoff: {{ rabbit_retry_backoff }}
      rabbit_interval_max: {{ rabbit_interval_max }}
      rabbit_ha_queues: false
      rabbit_quorum_queue: {{ rabbit_quorum_queue }}
      heartbeat_timeout_threshold: {{ heartbeat_timeout_threshold }}
      heartbeat_rate: {{ heartbeat_rate }}
      heartbeat_in_pthread: true
    DEFAULT:
      instance_usage_audit: false
      cert: /etc/nova/certs/tls.crt
      key: /etc/nova/certs/tls.key
      debug: true
      config_drive_cdrom: false
      force_config_drive: false
      ram_allocation_ratio: 0.9
      disk_allocation_ratio: 0.9
      cpu_allocation_ratio: 3.0
      my_ip: null
      weight_classes: nova.scheduler.weights.all_weighers
      block_device_allocate_retries: 360
      block_device_allocate_retries_interval: 10
      vif_plugging_timeout: 1200
      allow_resize_to_same_host: true
    devices:
      enabled_vgpu_types: 
    notifications:
      notification_format: versioned
    service_user:
      send_service_user_token: true
      auth_type: password
      auth_url: https://keystone-api.openstack.svc.cluster.local:5000/v3
      project_domain_name: service
      project_name: service
      user_domain_name: service
      username: nova
      password: {{ nova.password }}
    vnc:
      auth_schemes: vencrypt
      vencrypt_client_key: /etc/pki/nova-novncproxy/client-key.pem
      vencrypt_client_cert: /etc/pki/nova-novncproxy/client-cert.pem
      vencrypt_ca_certs: /etc/pki/nova-novncproxy/ca-cert.pem
      novncproxy_base_url: https://{{ keepalived_vip_svc|ternary(keepalived_vip_svc, keepalived_vip) }}:30608/vnc_auto.html
    libvirt:
      volume_use_multipath: {{ enable_multipath }}
      connection_uri: "qemu+tcp://127.0.0.1/system"
      images_type: {{ (storage_backends[0] == 'ceph')|ternary('rbd', 'qcow2') }}
{% if "ceph" in storage_backends %}
      images_rbd_pool: vms
      images_rbd_ceph_conf: /etc/ceph/ceph.conf
      rbd_user: cinder
      rbd_secret_uuid: {{ ceph_secret_uuid }}
{% endif %}
      virt_type: kvm
      disk_cachemodes: "network=writeback"
      hw_disk_discard: unmap
      nfs_mount_options: "{{ nova.nfs_mount_options }}"
    scheduler:
      driver: filter_scheduler
      discover_hosts_in_cells_interval: 60
    filter_scheduler:
      ram_weight_multiplier: 4.0
      available_filters: nova.scheduler.filters.all_filters
      enabled_filters: ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, ServerGroupAntiAffinityFilter, ServerGroupAffinityFilter
    quota:
      instances: -1
      cores: -1
      ram: -1
      metadata_items: -1
      injected_files: -1
      injected_file_content_bytes: -1
      injected_file_path_length: -1
      key_pairs: -1
      server_groups: -1
      server_group_members: -1
    workarounds:
      skip_cpu_compare_on_dest: true
      skip_cpu_compare_at_startup: true
  rabbitmq: null

endpoints:
  oslo_db:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      nova:
        username: nova
        password: {{ nova.password }}
  oslo_db_api:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      nova:
        username: nova
        password: {{ nova.password }}
  oslo_db_cell0:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      nova:
        username: nova
        password: {{ nova.password }}
  oslo_db_placement:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      nova:
        username: nova
        password: {{ nova.password }}
      placement:
        username: placement
        password: {{ placement.password }}
  oslo_messaging:
    port:
      https:
        default: 15680
    auth:
      admin:
        username: rabbitmq
        password: {{ rabbitmq.password }}
      nova:
        username: nova
        password: {{ nova.password }}
    statefulset:
      replicas: {{ pod.quorum_replicas }}
  identity:
    auth:
      admin:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: admin
        password: {{ os_admin_password }}
      nova:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: nova
        password: {{ nova.password }}
      neutron:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: neutron
        password: {{ neutron.password }}
      placement:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: placement
        password: {{ placement.password }}
      cinder:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: cinder
        password: {{ cinder.password }}
      test:
        cacert: /etc/ssl/certs/openstack-helm.crt
    scheme:
      default: https
    port:
      api:
        default: 8443
        public: 8443
  image:
    scheme:
      default: https
    port:
      api:
        public: 8443
  compute:
    host_fqdn_override:
      default:
        tls:
          secretName: nova-tls-api
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: 'https'
      service: 'https'
    port:
      api:
        public: 8443
  compute_metadata:
    host_fqdn_override:
      default:
        tls:
          secretName: metadata-tls-metadata
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
    port:
      metadata:
        public: 8443
  compute_novnc_proxy:
    host_fqdn_override:
      default:
        tls:
          secretName: nova-novncproxy-tls-proxy
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
    port:
      novnc_proxy:
        public: 8443
  compute_spice_proxy:
    host_fqdn_override:
      default:
        tls:
          secretName: nova-tls-spiceproxy
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
  placement:
    scheme:
      default: https
    port:
      api:
        public: 8443
  network:
    scheme:
      default: https
    port:
      api:
        public: 8443
pod:
  use_fqdn:
    compute: false
  security_context:
    nova:
      container:
        nova_api:
          runAsUser: 0
          readOnlyRootFilesystem: false
        nova_osapi:
          runAsUser: 0
          readOnlyRootFilesystem: false
  replicas:
    api_metadata: {{ pod.replicas }}
    osapi: {{ pod.replicas }}
    conductor: 1
    scheduler: 1
    novncproxy: {{ pod.replicas }}
  mounts:
    nova_novncproxy:
      nova_novncproxy:
        volumeMounts:
          - name: vnc-client-secret
            mountPath: /etc/pki/nova-novncproxy
            readOnly: true
        volumes:
          - name: vnc-client-secret
            secret:
              secretName: vnc-client-secret
              items:
                - key: ca_crt
                  path: ca-cert.pem
                - key: client_crt
                  path: client-cert.pem
                - key: client_key
                  path: client-key.pem
{% if "powerflex" in storage_backends %}
    nova_compute:
      nova_compute:
        volumeMounts:
{% if not enable_iscsi %}
          - name: dev
            mountPath: /dev
{% endif %}
          - name: nova-pfx
            mountPath: /opt/emc/scaleio/openstack
        volumes:
{% if not enable_iscsi %}
          - name: dev
            hostPath:
              path: /dev
{% endif %}
          - name: nova-pfx
            hostPath:
              path: /opt/emc/scaleio/openstack
{% endif %}
manifests:
  certificates: true
  pvc_instances: {{ nova.pvc_instances }}
...

---
images:
  tags:
    nginx: "{{ docker_image_repo }}/library/nginx:1.27.5"
    bootstrap: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    db_init: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    neutron_db_sync: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    db_drop: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    rabbit_init: "{{ docker_image_repo }}/library/rabbitmq:3.13.7-management"
    ks_user: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    ks_service: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    ks_endpoints: "{{ docker_image_repo }}/jijisa/heat:2024.1-ubuntu_jammy"
    neutron_server: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_rpc_server: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_dhcp: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_metadata: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_ovn_metadata: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_ovn_db_sync: "{{ docker_image_repo }}/openstackhelm/neutron:2024.1-ubuntu_jammy"
    neutron_ovn_vpn: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_l3: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_l2gw: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_openvswitch_agent: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_linuxbridge_agent: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_bagpipe_bgp: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_bgp_dragent: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    neutron_netns_cleanup_cron: "{{ docker_image_repo }}/jijisa/neutron:2024.1-ubuntu_jammy"
    dep_check: "{{ quay_image_repo }}/airshipit/kubernetes-entrypoint:latest-ubuntu_jammy"

network:
  server:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "https"
  backend:
  - {{ is_ovn|ternary('ovn', 'openvswitch') }}
  share_namespaces: true
  interface:
    tunnel: {{ neutron.tunnel }}
    tunnel_compute: {{ neutron.tunnel_compute }}
labels:
  agent:
    dhcp:
      node_selector_key: openstack-network-plane
      node_selector_value: enabled
    bgp_dragent:
      node_selector_key: openstack-network-plane
      node_selector_value: enabled
    l3:
      node_selector_key: {{ ovs_dvr|ternary('openstack-network-dvr', 'openstack-network-plane') }}
      node_selector_value: enabled
    metadata:
      node_selector_key: {{ ovs_dvr|ternary('openstack-network-dvr', 'openstack-network-plane') }}
      node_selector_value: enabled
  job:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
  netns_cleanup_cron:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
  test:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
pod:
  use_fqdn:
    neutron_agent: false
  resources:
    nginx:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
  replicas:
    server: {{ pod.replicas }}
    rpc_server: {{ pod.replicas }}
  security_context:
    neutron_server:
      pod:
        runAsUser: 0
      container:
        neutron_server:
          readOnlyRootFilesystem: false
    neutron_rpc_server:
      pod:
        runAsUser: 0
      container:
        neutron_rpc_server:
          readOnlyRootFilesystem: false
  mounts:
    neutron_server:
      init_container: null
      neutron_server:
        volumeMounts:
          - name: timezone
            mountPath: /etc/localtime
        volumes:
          - name: timezone
            hostPath:
              path: /etc/localtime
conf:
  db_acl:
    enabled: true
  neutron_api_uwsgi:
    uwsgi:
      http-socket: 127.0.0.1:9696
  nginx: |
    worker_processes 1;
    daemon off;
    user nginx;

    events {
      worker_connections 1024;
    }

    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      sendfile on;
      keepalive_timeout 65s;
      tcp_nodelay on;

      log_format main '[nginx] method=$request_method path=$request_uri '
                      'status=$status upstream_status=$upstream_status duration=$request_time size=$body_bytes_sent '
                      '"$remote_user" "$http_referer" "$http_user_agent"';

      access_log /dev/stdout  main;

      upstream websocket {
        server 127.0.0.1:$PORT;
      }

      server {
        server_name {% raw %}{{ printf "%s.%s.svc.%s" "${SHORTNAME}" .Release.Namespace .Values.endpoints.cluster_domain_suffix }}{% endraw %};
        listen $POD_IP:$PORT ssl;

        client_max_body_size  0;

        ssl_certificate      /etc/nginx/certs/tls.crt;
        ssl_certificate_key  /etc/nginx/certs/tls.key;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

        location / {
          proxy_pass_request_headers on;

          proxy_http_version  1.1;
          proxy_pass          http://websocket;
          proxy_read_timeout  90;
        }
      }
    }
  neutron:
    DEFAULT:
      bind_host: 127.0.0.1
      debug: True
      core_plugin: ml2
      global_physnet_mtu: {{ openstack_mtu }}
{% if overlay_iface_name %}
      service_plugins: ovn-router
{% endif %}
    nova:
      cafile: /etc/neutron/certs/ca.crt
    keystone_authtoken:
      cafile: /etc/neutron/certs/ca.crt
    oslo_messaging_rabbit:
      ssl: true
      ssl_ca_file: /etc/rabbitmq/certs/ca.crt
      ssl_cert_file: /etc/rabbitmq/certs/tls.crt
      ssl_key_file: /etc/rabbitmq/certs/tls.key
      rabbit_retry_interval: {{ rabbit_retry_interval }}
      rabbit_retry_backoff: {{ rabbit_retry_backoff }}
      rabbit_interval_max: {{ rabbit_interval_max }}
      rabbit_ha_queues: false
      rabbit_quorum_queue: {{ rabbit_quorum_queue }}
      heartbeat_timeout_threshold: {{ heartbeat_timeout_threshold }}
      heartbeat_rate: {{ heartbeat_rate }}
    quotas:
      quota_network: -1
      quota_subnet: -1
      quota_port: -1
      quota_router: -1
      quota_floatingip: -1
      quota_security_group: -1
      quota_security_group_rule: -1

  plugins:
    ml2_conf:
      ml2:
        mechanism_drivers: {{ is_ovn|ternary("ovn", "openvswitch") }}
        type_drivers: flat{% if ovs_provider[0].vlan_ranges %},vlan{% endif %}{% if (overlay_iface_name and is_ovn) %},geneve{% else %},vxlan{% endif +%}
        extension_drivers: port_security,qos

        tenant_network_types: {{ (overlay_iface_name and is_ovn)|ternary('geneve', 'vxlan') }}
        overlay_ip_version: 4
      ml2_type_flat:
        flat_networks: "*"
{% if not is_ovn %}
{% if ovs_provider[0].vlan_ranges %}
      ml2_type_vlan:
        network_vlan_ranges: "{%- for b in ovs_provider %}{{ b.name }}:{{ b.vlan_ranges }}{% if not loop.last %},{% endif %}{% endfor %}"
{% endif %}
{% endif %}
{% if overlay_iface_name %}
{% if is_ovn %}
      ml2_type_geneve:
        vni_ranges: "1:1000"
        max_header_size: 38
{% else %}
      ml2_type_vxlan:
        vni_ranges: "1:1000"
{% endif %}
{% endif %}
      securitygroup:
        enable_ipset: false
  rabbitmq:
    policies:
      - vhost: "neutron"
        name: "ha_ttl_neutron"
        definition:
          message-ttl: 70000
        priority: 0
        apply-to: all
        pattern: '^(?!(amq\.|reply_)).*'
endpoints:
  oslo_db:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      neutron:
        username: neutron
        password: {{ neutron.password }}
  oslo_messaging:
    port:
      https:
        default: 15680
    auth:
      admin:
        username: rabbitmq
        password: {{ rabbitmq.password }}
      neutron:
        username: neutron
        password: {{ neutron.password }}
    statefulset:
      replicas: {{ pod.quorum_replicas }}
  identity:
    name: keystone
    auth:
      admin:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: admin
        password: {{ os_admin_password }}
      neutron:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: neutron
        password: {{ neutron.password }}
      nova:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: nova
        password: {{ nova.password }}
      placement:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: placement
        password: {{ placement.password }}
      test:
        cacert: /etc/ssl/certs/openstack-helm.crt
    scheme:
      default: https
    port:
      api:
        default: 8443
        public: 8443
  compute:
    scheme:
      default: https
    port:
      api:
        public: 8443
  compute_metadata:
    scheme:
      default: https
    port:
      metadata:
        public: 8443
  network:
    host_fqdn_override:
      default:
        tls:
          secretName: neutron-tls-server
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
    port:
      api:
        public: 8443
  ingress:
    port:
      ingress:
        default: 8443

manifests:
  certificates: true
  cron_job_ovn_db_sync: true
  daemonset_dhcp_agent: false
  daemonset_l3_agent: false
  daemonset_lb_agent: false
  daemonset_metadata_agent: false
  daemonset_ovs_agent: false
  daemonset_sriov_agent: false
  daemonset_l2gw_agent: false
  daemonset_bagpipe_bgp: false
  daemonset_bgp_dragent: false
  daemonset_netns_cleanup_cron: true
  daemonset_ovn_metadata_agent: true
...

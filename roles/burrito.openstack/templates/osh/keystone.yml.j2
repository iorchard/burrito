---
images:
  tags:
    bootstrap: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    db_init: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    db_drop: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    keystone_api: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_bootstrap: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    keystone_credential_rotate: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_credential_setup: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_credential_cleanup: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_db_sync: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_domain_manage: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_fernet_rotate: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    keystone_fernet_setup: "{{ docker_image_repo }}/jijisa/keystone:2023.1-ubuntu_jammy"
    ks_user: "{{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy"
    dep_check: "{{ quay_image_repo }}/airshipit/kubernetes-entrypoint:v1.0.0"
    rabbit_init: "{{ docker_image_repo }}/library/rabbitmq:3.12.11-management"

network:
  api:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: null
        nginx.ingress.kubernetes.io/backend-protocol: "https"
conf:
  db_acl:
    enabled: true
  software:
    apache2:
      a2enmod:
        - ssl
  keystone:
    oslo_messaging_rabbit:
      ssl: true
      ssl_ca_file: /etc/rabbitmq/certs/ca.crt
      ssl_cert_file: /etc/rabbitmq/certs/tls.crt
      ssl_key_file: /etc/rabbitmq/certs/tls.key
      rabbit_retry_interval: {{ rabbit_retry_interval }}
      rabbit_retry_backoff: {{ rabbit_retry_backoff }}
      rabbit_interval_max: {{ rabbit_interval_max }}
      rabbit_ha_queues: false
      rabbit_quorum_queue: {{ rabbit_quorum_queue }}
      heartbeat_timeout_threshold: {{ heartbeat_timeout_threshold }}
      heartbeat_rate: {{ heartbeat_rate }}
      heartbeat_in_pthread: true
  rabbitmq: null
{% raw %}
  wsgi_keystone: |
    {{- $portInt := tuple "identity" "service" "api" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}

    Listen 0.0.0.0:{{ $portInt }}

    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy

    SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
    CustomLog /dev/stdout combined env=!forwarded
    CustomLog /dev/stdout proxy env=forwarded

    <VirtualHost *:{{ tuple "identity" "service" "api" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}>
      ServerName {{ printf "%s.%s.svc.%s" "keystone-api" .Release.Namespace .Values.endpoints.cluster_domain_suffix }}
      WSGIDaemonProcess keystone-public processes=1 threads=1 user=keystone group=keystone display-name=%{GROUP}
      WSGIProcessGroup keystone-public
      WSGIScriptAlias / /var/www/cgi-bin/keystone/keystone-wsgi-public
      WSGIApplicationGroup %{GLOBAL}
      WSGIPassAuthorization On
      <IfVersion >= 2.4>
        ErrorLogFormat "%{cu}t %M"
      </IfVersion>
      ErrorLog /dev/stdout

      SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
      CustomLog /dev/stdout combined env=!forwarded
      CustomLog /dev/stdout proxy env=forwarded

      SSLEngine on
      SSLCertificateFile      /etc/keystone/certs/tls.crt
      SSLCertificateKeyFile   /etc/keystone/certs/tls.key
      SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
      SSLCipherSuite          ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
      SSLHonorCipherOrder     on
    </VirtualHost>
{% endraw %}
pod:
  security_context:
    keystone:
      pod:
        runAsUser: 0
      container:
        keystone_api:
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
  replicas:
    api: {{ pod.replicas }}
endpoints:
  identity:
    auth:
      admin:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: admin
        password: {{ os_admin_password }}
      test:
        cacert: /etc/ssl/certs/openstack-helm.crt
    host_fqdn_override:
      default:
        tls:
          secretName: keystone-tls-api
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
      public: https
      service: https
    port:
      api:
        default: 443
        public: 8443
        admin: 8443
  oslo_db:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      keystone:
        username: keystone
        password: {{ keystone.password }}
  oslo_messaging:
    port:
      https:
        default: 15680
    auth:
      admin:
        username: rabbitmq
        password: {{ rabbitmq.password }}
      keystone:
        username: keystone
        password: {{ keystone.password }}
    statefulset:
      replicas: {{ pod.quorum_replicas }}
tls:
  identity: true
  oslo_messaging: true
  oslo_db: true
manifests:
  certificates: true
...

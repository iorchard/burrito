---
images:
  tags:
    nginx: {{ docker_image_repo }}/library/nginx:1.25.3
    bootstrap: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    db_init: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    db_drop: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    ks_user: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    ks_service: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    ks_endpoints: {{ docker_image_repo }}/jijisa/heat:2023.1-ubuntu_jammy
    glance_db_sync: {{ docker_image_repo }}/jijisa/glance:2023.1-ubuntu_jammy
    glance_api: {{ docker_image_repo }}/jijisa/glance:2023.1-ubuntu_jammy
    glance_metadefs_load: {{ docker_image_repo }}/jijisa/glance:2023.1-ubuntu_jammy
    glance_storage_init: {{ docker_image_repo }}/openstackhelm/ceph-config-helper:latest-ubuntu_focal
    dep_check: {{ quay_image_repo }}/airshipit/kubernetes-entrypoint:v1.0.0
    rabbit_init: {{ docker_image_repo }}/library/rabbitmq:3.12.11-management

nginx_deployment:
  type: {{ glance.nginx_deploy.type }}
  pvc:
    enabled: true
    class_name: {{ glance.nginx_deploy.class_name }}
    access_modes: {{ glance.nginx_deploy.access_modes }}
    size: {{ glance.nginx_deploy.size }}

conf:
{% if 'ceph' in storage_backends %}
  software:
    rbd:
      rbd_store_pool_app_name: rbd
{% endif %}
  db_acl:
    enabled: true
  glance:
    DEFAULT:
      bind_host: 127.0.0.1
      debug: true
      show_image_direct_url: true
      show_multiple_locations: {{ ('cinder' in glance_enabled_backends_str)|ternary('true', 'false') }}
      enabled_backends: {{ glance_enabled_backends_str }}
    keystone_authtoken:
      service_token_roles: service
      service_token_roles_required: true
      cafile: /etc/glance/certs/ca.crt

{% if "ceph:rbd" in glance.enabled_backends %}
    ceph:
      store_description: "ceph rbd backend"
      rbd_store_replication: {{ ceph_pool_default_size }}
      rbd_store_user: glance
      rbd_store_pool: images
      rbd_store_ceph_conf: /etc/ceph/ceph.conf
      rbd_store_chunk_size: 8
      rbd_thin_provisioning: true
      rbd_store_crush_rule: replicated_rule
{% endif %}

{% if "powerflex:file" in glance.enabled_backends %}
    powerflex:
      store_description: "powerflex pvc backend"
      filesystem_store_datadir: /var/lib/glance/images
{% endif %}

{% for backend in glance.enabled_backends %}
{% if "cinder" in backend %}
    {{ (backend|split(':'))[0] }}:
      store_description: "{{ backend|replace(':', ' ') }} backend"
      cinder_catalog_info: "volumev3::internalURL"
      cinder_store_auth_address: "https://keystone-api.openstack.svc.cluster.local:5000/v3"
      cinder_store_user_name: admin
      cinder_store_password: {{ os_admin_password }}
      cinder_store_project_name: admin
      cinder_volume_type: {{ (backend|split(':'))[0] }}
{% endif %}
{% endfor %}

    glance_store:
      default_backend: "{{ glance.default_backend }}"
      https_ca_certificates_file: /etc/glance/certs/ca.crt
      swift_store_cacert: /etc/glance/certs/ca.crt

{% if "ceph:rbd" in glance.enabled_backends %}
      # This is duplicate but it is needed by glance helm chart
      # glance-storage-init get the info from glance_store section.
      rbd_store_replication: {{ ceph_pool_default_size }}
      rbd_store_user: glance
      rbd_store_pool: images
      rbd_store_ceph_conf: /etc/ceph/ceph.conf
      rbd_store_chunk_size: 8
      rbd_thin_provisioning: true
{% endif %}

    oslo_messaging_rabbit:
      ssl: true
      ssl_ca_file: /etc/rabbitmq/certs/ca.crt
      ssl_cert_file: /etc/rabbitmq/certs/tls.crt
      ssl_key_file: /etc/rabbitmq/certs/tls.key
      rabbit_retry_interval: {{ rabbit_retry_interval }}
      rabbit_retry_backoff: {{ rabbit_retry_backoff }}
      rabbit_interval_max: {{ rabbit_interval_max }}
      rabbit_ha_queues: false
      rabbit_quorum_queue: {{ rabbit_quorum_queue }}
      heartbeat_timeout_threshold: {{ heartbeat_timeout_threshold }}
      heartbeat_rate: {{ heartbeat_rate }}
  ceph:
    admin_keyring: {{ ceph_admin_key }}
  rabbitmq: null
{% raw %}
  nginx: |
    worker_processes 1;
    daemon off;
    user nginx;

    events {
      worker_connections 1024;
    }

    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      sendfile on;
      keepalive_timeout 65s;
      tcp_nodelay on;

      log_format main '[nginx] method=$request_method path=$request_uri '
                      'status=$status upstream_status=$upstream_status duration=$request_time size=$body_bytes_sent '
                      '"$remote_user" "$http_referer" "$http_user_agent"';

      access_log /dev/stdout  main;

      upstream websocket {
        server 127.0.0.1:$PORT;
      }

      server {
        server_name {{ printf "%s.%s.svc.%s" "${SHORTNAME}" .Release.Namespace .Values.endpoints.cluster_domain_suffix }};
        listen $POD_IP:$PORT ssl;

        client_max_body_size  0;

        ssl_certificate      /etc/nginx/certs/tls.crt;
        ssl_certificate_key  /etc/nginx/certs/tls.key;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

        location / {
          proxy_pass_request_headers on;

          proxy_http_version  1.1;
          proxy_pass          http://websocket;
          proxy_read_timeout  300;
        }
      }
    }
{% endraw %}
network:
  api:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: "{{ glance.nginx.proxy_body_size }}"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "{{ glance.nginx.proxy_read_timeout }}"
        nginx.ingress.kubernetes.io/backend-protocol: "https"

storage: {{ glance.storage }}
volume:
  class_name: "{{ storageclass_name }}"
  size: "{{ glance.volume_size }}"

dependencies:
  static:
    api:
      jobs: {{ glance_api_jobs_dependencies }}

bootstrap:
  enabled: false
endpoints:
  identity:
    name: keystone
    auth:
      admin:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: admin
        password: {{ os_admin_password }}
      glance:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: glance
        password: {{ glance.password }}
      test:
        cacert: /etc/ssl/certs/openstack-helm.crt
    scheme:
      default: https
    port:
      api:
        default: 8443
        public: 8443
  image:
    host_fqdn_override:
      default:
        tls:
          secretName: glance-tls-api
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
      public: https
    port:
      api:
        public: 8443
        admin: 9292
  dashboard:
    scheme:
      default: https
      public: https
    port:
      web:
        default: 80
        public: 443
  oslo_db:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      glance:
        username: glance
        password: {{ glance.password }}
  oslo_messaging:
    port:
      https:
        default: 15680
    auth:
      admin:
        username: rabbitmq
        password: {{ rabbitmq.password }}
      glance:
        username: glance
        password: {{ glance.password }}
    statefulset:
      replicas: {{ pod.quorum_replicas }}
pod:
  useHostNetwork:
    api: "{{ ('cinder' in glance.storage) | ternary('true', 'false') }}"
  security_context:
    glance:
      pod:
        runAsUser: 0
      container:
        glance_api:
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
          privileged: true
  resources:
    nginx:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
  replicas:
    api: {{ ('file' in glance_enabled_backends_str) | ternary(1, pod.replicas) }}
{% if "powerflex" in storage_backends %}
  mounts:
    glance_api:
      glance_api:
        volumeMounts:
          - name: glance-pfx
            mountPath: /opt/emc/scaleio/openstack
        volumes:
          - name: glance-pfx
            hostPath:
              path: /opt/emc/scaleio/openstack
{% endif %}

manifests:
  pod_rally_test: false
  certificates: true
  job_storage_init: {{ glance_job_storage_init }}
  pvc_nginx_client_tmp: {{ glance.pvc_nginx_client_tmp }}
...
